7. Advanced Features of React
যে কোনো টেকনলজি এর ক্ষেত্রে এর কোর ফিচার গুলোকেই সব থেকে বেশি গুরুত্ব দেওয়া হয়ে থাকে। এই কোর ফিচার গুলো ব্যবহার করে যে কোন ধরনের কাজ করা যায়। React এর ব্যতিক্রম না। আপনি এই Chunk এ React সম্পর্কে যা কিছু শিখবেন, সব কিছুই React এর কোর ফিচার।

এই ফিচার গুলো ব্যবহার করে সব কিছু করা গেলেও কিছু প্রব্লেম কিন্তু আপনাকে ফেস করতে হবে। কারণ শুধু কোর ফিচার ব্যবহার করলে আপনাকে অনেক বেশি কোড লিখতে হবে। যখন অনেক বেশি কোড লিখবেন তখন কোড ডুপ্লিকেট হওয়ার সম্ভাবনা থাকবে। কোড ম্যানেজ করা কষ্টকর হয়ে যাবে। কোনো পরিবর্তন বা নতুন কোনো কিছু সংযোজন করতে চাইলে সেটাও অনেক কষ্টসাধ্য ব্যপার হয়ে যাবে। তাই আমাদেরকে অ্যাডভানস কিছু ফিচার, কিছু প্যাটার্ন অথবা কিছু কৌশলের সাহায্য নিতে হবে। React Redux এই Array জুড়ে আমরা আপনাকে বিভিন্ন ভাবে বিভিন্ন প্রব্লেম বোঝানোর চেষ্টা করব এবং তার সহজ থেকে সহজতর সমাধান দেওয়ার চেষ্টা করব।

এই Chunk এ আমরা React এর অ্যাডভানস কোনো ফিচার নিয়ে আলোচনা করব না। এবং আপনাকেও জানিয়ে রাখছি আপনি যতক্ষণ না কোর ফিচার গুলতে নিজেকে কম্ফর্টেবল মনে করছেন, ততক্ষণ কোনো অ্যাডভানস ফিচার শেখার চিন্তা করবেন না। এখানে আমি আপনাদের কে কিছু React এর নিজস্ব অ্যাডভানস ফিচার সম্পর্কে ধারণা দিচ্ছি, যেন এই Chunk টা শেষ করার পরে কি শিখতে হবে তা আপনি আগে থেকেই জানতে এবং বুঝতে পারেন। আগে থেকে যদি জানা থাকে আমাকে কি কি শিখতে হবে তাহলে সময়টাকে বণ্টন এবং ব্যবহার করতে সহজ হয়।

React এর অ্যাডভান্সড বিষয় গুলো -

Advanced Component & Life Cycle Methods - আমরা এই Chunk এ React এর বেসিক কম্পোনেন্ট ফিচার গুলো দেখবো, এই গুলো বাদেও কম্পোনেন্টের অ্যাডভান্সড কিছু ফিচার আছে। যেই বিষয় গুলো না জানা থাকলে বড় কোনো অ্যাপ্লিকেশন নিয়ে কাজ করা খুবই কষ্টসাধ্য ব্যাপার হয়ে যায়।
Asynchronous Operations & Side Effects - একটা ওয়েব অ্যাপ্লিকেশনে বিশেষ করে সিঙ্গেল পেজ অ্যাপ্লিকেশন গুলতে AJAX এর মাধ্যমে সার্ভারে রিকুয়েস্ট পাঠানো হয়। এই একই ভাবে সার্ভার থেকে ডাটা এনে ব্রাউজারে শো করানো হয়, আবার ইউজার যেই ডাটা গুলো তৈরি করে সেই গুলো সার্ভারে সংরক্ষণের জন্য পাঠিয়ে দেওয়া হয়। এই কাজ গুলো ভালো ভাবে বোঝার জন্য কম্পোনেন্ট এবং এর লাইফ সাইকেল মেথড সম্পর্কে ভাল ধারণা থাকতে হয়।
Smart vs Dumb Component - React এ সাধারণত দুই ধরনের কম্পোনেন্ট নিয়ে কাজ করা হয়। এক ধরনের কম্পোনেন্ট ডাটা এবং রিপ্রেসেন্টেশন নিয়ে কাজ করে থাকে, এই গুলোকে বলা হয় স্মার্ট কম্পোনেন্ট। অন্য দিকে কিছু কম্পোনেন্ট আছে যার কাজ শুধু ছোট্ট একটা অংশ ব্রাউজারে রেন্ডার করা, যাদেরকে ডাম্ব কম্পোনেন্ট বলে।
Higher Order Component - মাঝে মাঝে আমাদের কিছু ফাংশন দরকার হয়, যা একটা React কম্পোনেন্টকে আর্গুমেন্ট আকারে নিয়ে থাকে এবং আর একটা নতুন মডিফাইড কম্পোনেন্ট রিটার্ন করে থাকে। সাধারণত একই ধরনের কাজ বার বার না করে কোড রিইউজ করার জন্য এই ধরনের ফাংশন ব্যবহার করা হয়ে থাকে। এদের কে Higher Order Component বলে।
Error Boundary - আপনি যত ভাল মাপের ডেভেলপারই হন না কেন, আপনাকে ইরর এর সম্মুখীন হতেই হবে। যখন একটা অ্যাপ্লিকেশনে কোনো ইরর ঘটে থাকে তখন পুরো অ্যাপ্লিকেশনটাই অকেজো হয়ে যায়। আর আপনার ইউজার যদি এইরকম সিসুয়েশনের সম্মুখীন হয় যখন আপনার অ্যাপ্লিকেশন আর কাজ করছে না, তাহলে ওই ইউজার আর আপনার অ্যাপ্লিকেশনটা ব্যবহার করবে না। তাই খুব সুব্দর ভাবে আমাদের ইরর গুলো হ্যান্ডেল করতে হয়। যদি কোনো ইরর ঘটে থাকে তাহলে পুরো অ্যাপ্লিকেশনটা যেন ক্রাশ না করে, এবং ইউজারকে একটা সুন্দর ফিডব্যাক দেই।
Context API - এটা তুলনামূলক নতুন একটা ফিচার। যখন আপনি অনেক বড় অ্যাপ্লিকেশন বানাবেন তখন অনেক অনেক ডাটা হবে, সেই ডাটা গুলো ম্যানেজ করা খুব কষ্টের কাজ। সহজে যেন সেই ডাটা গুলো ম্যানেজ করা যায় তাই React নিয়ে এসেছে Context API।
Refs - React পুরো কাজটা করে ভার্চুয়াল ডম এ। অর্থাৎ ব্রাউজারে সব কিছু রেন্ডার করার আগে সব কিছু স্টোর করা থাকে র‍্যাম এ। আমরা যেই এলিমেন্ট গুলো নিয়ে কাজ করি সেই গুলোর ও বাস্তবে কোন অস্তিত্ব তৈরি হওয়ার আগেই আমরা ব্যবহার করি। ইভেন্ট যুক্ত করি। যখন একটা এলিমেন্ট ব্রাউজারে সফল ভাবে রেন্ডার হয়ে যাবে তখন তার স্টেটটা যদি আমরা জানতে চাই তখন আমাদের সাহায্য নিতে হবে Refs এর।
Controlled Component - যখন একটা ফর্ম এর স্টেট বা ডাটা আমাদের তৈরি করা কম্পোনেন্ট ম্যানেজ করে থাকে তখন সেটা হচ্ছে Controlled Component।
UnControlled Component - যখন একটা ফর্ম এর ডাটা ব্রাউজার ম্যানেজ করে থাকে তখন তাকে বলে UnControlled Component।
Hooks - এটা হচ্ছে React এর সব থেকে নতুন ফিচার। এই ফিচারের মাধ্যমে React এর আর্কিটেকচারটাই পুরো পুরি পরিবর্তিত হয়ে গেছে। এখন React অ্যাপ্লিকেশন গুলো তৈরি করা এবং ম্যানেজ করা আগের থেকে অনেক সহজ হয়ে গিয়েছে। তবে Hooks নিয়ে কাজ করতে চাইলেও আগে আমাদের আগের React টা ভাল করে জানতে এবং বুঝতে হবে।
Design Patterns - এটা React এর কোনো ফিচার না। যখন আপনি React ব্যবহার করে বড় কোনো অ্যাপ্লিকেশন ডেভেলপ করতে যাবেন তখন অনেক ধরনের প্রব্লেম এর সম্মুখীন হবে। বড় বড় ডেভেলপার রাও হয়ে ছিল। তারা যখন প্রব্লেম এর সম্মুখীন হয়েছিল তখন তারা কিভাবে প্রব্লেমটার সমাধান করেছিল? আসলে ডেভেলপমেন্ট এ দেখা যায় আমরা সব সময় প্রায় একই ধরনের প্রব্লেম এর সম্মুখীন হয়। আর এই প্রব্লেম গুলোর সমাধান আগে থেকেই খুব সহজ এবং সঠিক ভাবে করে রাখা আছে। এই গুলই মূলত ডিজাইন প্যাটার্ন।
এই সব বিষয় গুলো আমরা শিখব পরবর্তী Chunk এ। বাস্তব জীবনের প্রব্লেম গুলো দেখব, দেখব কিভাবে React এর অ্যাডভান্সড ফিচার এবং ডিজাইন প্যাটার্ন ব্যবহার করে কিভাবে এই প্রব্লেম গুলোর সমাধান করা যায়।


8. Tools We Need to Work with React
React খুবই ছোট একটা লাইব্রেরী। শুধুমাত্র ইন্টারেক্টিভ UI ডিজাইন করার জন্য এই লাইব্রেরীটা তৈরি করা হয়েছে। তাই সম্পূর্ণ ওয়েব অ্যাপ্লিকেশন বানানোর জন্য যা যা সুযোগ সুবিধা দরকার তা বিউল্ট ইন ভাবে React এ নেই। React খুব ছোট্ট একটা দায়িত্ব পালন করে, আর এই ছোট্ট দায়িত্বটা সে খুব যত্নের সাথে ভাল ভাবে পালন করে, আর তাই তো React এত জনপ্রিয়। তবে ওয়েব অ্যাপ্লিকেশন বানানোর জন্য তো আমাদের আরও অনেক ফিচার দরকার, সেই গুলোর সল্যুশন কিভাবে করব?

এই লেসনে আমরা সেই বিষয়েই আলোচনা করতে যাচ্ছি। React একটা লাইব্রেরী, এর সাথে আমাদের পছন্দ মত টুলস ব্যবহার করে আমরা একটা কাস্টম ফ্রেমওয়ার্ক বানিয়ে ফেলতে পারি। যদি ও এই গুলো আপনার এখনই দরকার পরবে না, যখন আপনি পুরোপুরি ভাবে React শিখে ফেলবেন তখনই শুধু এই গুলো দরকার পরবে। কিন্তু আপনাদের জ্ঞাতার্তে, যেন আপনাদের React এর সাথের যাত্রাটা পরিকল্পনা করতে সহজ হয় তাই আমি এখনি আপনাদের কে বিষয় গুলো জানিয়ে রাখছি।

আমি এখানে যেই টুলস গুলোর কথা বলবো সেই গুলোই যে আপনাকে ব্যবহার করতে হবে এমনটা না। এই টুলসটা যেই প্রব্লেমটা সলভ করছে সেই একই সলভ করতে পারে এমন যে কোনো টুলস আপনি ব্যবহার করতে পারেন। এখানে আমি শুধু মাত্র প্রধান প্রব্লেম গুলোর কথাই উল্লেখ করছি, এছাড়াও আপনি যখন ডেভেলপমেন্ট করবেন তখন আরও অনেক রকম প্রব্লেম এর সম্মুখীন হতে পারেন। সেই সময় আপনার প্রয়োজন অনুযায়ী সঠিক টুলটা আপনাকেই খুঁজে নিতে হবে। তবে ভয় পাওয়ার কিছু নেই, সম্ভাব্য সকল প্রব্লেম এর সমাধান আগেই থেকেই হয়ে আছে, আপনাকে শুধু খুঁজে নিতে হবে।

প্রধান প্রব্লেম গুলো যা না হলে ওয়েব অ্যাপ্লিকেশন হবে না, কিন্তু সে গুলো React এর সাথে বিউল্ট ইন ভাবে নেই -

AJAX: React অ্যাপ্লিকেশনে সার্ভার থেকে ডাটা নিয়ে এসে ব্রাউজারে দেখানো বা ইউজার এর তৈরি করা ডাটা সার্ভারে পাঠানোর জন্য ব্যবহার করা হয় AJAX. এই জন্য আপনি ব্যবহার করতে পারেন Fetch API অথবা Axios লাইব্রেরী। React এ AJAX এর জন্য বিউল্ট ইন কোনো সমাধান দেওয়া নেই।
Routing: যখন আপনি সিঙ্গেল পেজ অ্যাপ্লিকেশন বানাবেন তখন আপনাকে ক্লাইন্ট সাইডে রাউটিং করার প্রয়োজন পরবে। অর্থাৎ বিভিন্ন রাউটের জন্য বিভিন্ন পেজ রেন্ডার করার সিস্টেম দরকার পরবে। React এর জন্য কোনো সমাধান নেই। আপনি থার্ড পার্টি টুলস হিসেবে React Router 5 or Reach Router ব্যবহার করতে পারেন।
Redux: অ্যাপ্লিকেশন যখন বড় হয়ে যায় তখন অ্যাপ্লিকেশনের ডাটা ম্যানেজ করা খুব কষ্টকর ব্যাপার হয়ে যায়। React এ বিউল্ট ইন ভাবে যে সমাধান দেওয়া আছে, তা এই প্রব্লেম এর সমাধান করতে পারে না। তাই আমাদের দরকার হয় কোনো একটা স্টেট ম্যানেজমেন্ট টুল। এই কাজের জন্য জনপ্রিয় লাইব্রেরী হচ্ছে Redux। কিন্তু আপনি আপনার পছন্দ মত যে কোনো একটা স্টেট ম্যানেজমেন্ট লাইব্রেরী ব্যবহার করতে পারেন।
Responsive CSS Frameworks: React আপনার অ্যাপ্লিকেশন কে রেস্পন্সিভ করবে না। এর জন্য আপনার অন্য কোনো একটা টুলস এর সাহায্য নিতে হবে। আপনি Bootstrap এর সাহায্য নিতে পারেন, Bootstrap কে  React এর জন্য আলাদা ভাবে ইমপ্লিমেন্ট করে বানানো হয়েছে ReactStrap। এটা খুবই ভাল একটা লাইব্রারি যদি আপনি আগে থেকেই Bootstrap জেনে থাকেন। কিন্তু আমার সাজেশন হল এর সাথে সাথে Material UI টা শিখবেন। এটা খুবই জনপ্রিয় একটা ফ্রেমওয়ার্ক।
এই গুলোই হল প্রধান প্রব্লেম যে গুলোর সমাধান React আগে থেকে করে দিলে আমাদের জন্য ভাল হত। কিন্তু না করাতে ও খারাপ কিছু হয়নি। আমরা এখন আমাদের পছন্দ মত যে কোনো টুলস ব্যবহার করে কাজ করতে পারছি। এছাড়া আপনার বিভিন্ন সময় বিভিন্ন ইউটিলিটি লাইব্রেরী এর সাহায্য নিতে হতে পারে।


3. What is BabelJS
BabelJS হল জাভাস্ক্রিপ্টের একটা কম্পাইলার। আপনি যদি মডার্ন জাভাস্ক্রিপ্ট ব্যবহার করে থাকেন তাহলে আপনার এই কম্পাইলারের প্রয়োজন হবে।

২০১৫ সালে জাভাস্ক্রিপ্টের নতুন ভার্সন রিলিজ হয়, যেই রিলিজে অনেক বেশি পরিবর্তন আসে। যেই সব ফিচার গুলো আগে জাভাস্ক্রিপ্টে কখনো ছিল না এরকম অসংখ্য ফিচার জাভাস্ক্রিপ্টে যুক্ত হয়। কিন্তু সমস্যা হল এই নতুন ফিচার গুলো পুরাতন ব্রাউজার গুলোতে সাপোর্ট করত না। এখনো বাজারে অনেক ব্রাউজার আছে যা ইউজার আপডেট করেনি। যার ফলে এই সব ব্রাউজারে জাভাস্ক্রিপ্টের নতুন ফিচার গুলো অচল।

যেন সব রকম ব্রাউজারে জাভাস্ক্রিপ্টের সাপোর্ট দেওয়া যায় এই জন্য নতুন একটা কম্পাইলারের প্রয়োজন হল। এই কম্পাইলারটার কাজ হল নতুন ভার্সনের জাভাস্ক্রিপ্ট কোড গুলোকে পুরাতন ভার্সনের জাভাস্ক্রিপ্ট কোডে রূপান্তর করে ফেলা। এর ফলে যেটা হল, আপনি কোড লেখার সময় মডার্ন জাভাস্ক্রিপ্ট ব্যবহার করেই কোড লিখবেন, কিন্তু এই কোড টাকে কম্পাইল করে পুরাতন জাভাস্ক্রিপ্টে রূপান্তর করে সার্ভ করা হবে, যেন অনেক পুরাতন ব্রাউজারেও আপনার কোডটা ব্যবহার করা যায়। আপনি তো আপনার ইউজারের ব্রাউজার আপডেট করতে পারবেন না, তাই আপনি আপনার কোডটাকে ডাউনগ্রেড করে দিচ্ছেন সর্বোচ্চ সাপোর্ট এর জন্য।

এই কাজটা করার জন্য বাজারে অনেক টুলস থাকলেও সব থেকে জনপ্রিয় এবং ভাল টুলস হল BabelJS। ReactJS এ আপনাকে মডার্ন জাভাস্ক্রিপ্ট নিয়েই কাজ করতে হবে। এর সাথে ReactJS এর নিজস্ব কিছু ফিচার আছে যা কম্পাইল করে রেগুলার জাভাস্ক্রিপ্টে রূপান্তর করার জন্য আমাদের BabelJS দরকার হবে।

আপনি BabelJS এর অফিশিয়াল ওয়েবসাইটে ভিসিট করে এর ডকুমেন্টেশন দেখতে পারেন। BabelJS তার ওয়েবসাইটে একটি REPL ও দিয়ে রেখেছে, যেখানে আপনি লাইভ কোড করে দেখতে পারবেন যে মডার্ন জাভাস্ক্রিপ্ট কোড কিভাবে কম্পাইল হয়ে রেগুলার জাভাস্ক্রিপ্ট কোডে রূপান্তর হয়।



4. What is Webpack
যত দিন যাচ্ছে তত জাভাস্ক্রিপ্ট উন্নত হচ্ছে এবং জাভাস্ক্রিপ্টকে ঘিরে তৈরি হচ্ছে নানা রকম সব টুলস আমাদের কাজ গুলোকে সহজ করার জন্য। Webpack এমনই একটা টুলস।

Webpack এর মূল দায়িত্ব হচ্ছে কোড গুলোকে বান্ডেলিং করে ফেলা। আমরা যখন একটা প্রজেক্ট করি তখন সেখানে অনেক ফাইল হয়। অর্থাৎ আমরা আমাদের কোড গুলোকে ছোট ছোট ফাইলে ডিস্ট্রিবিউট করে রাখি যেন কোড গুলো ম্যানেজ করতে সহজ হয়। কিন্তু যদি এভাবেই অনেক গুলো ফাইলে কোড রেখে আমরা ওয়েব সাইটকে পাবলিশ করে দেই তাহলে আমাদের ওয়েবসাইট বা ওয়েব অ্যাপ্লিকেশনটার পার্ফরমেন্স ভাল হবে না। কারণ প্রতিটা ছোট ছোট ফাইলের জন্য এর নেটওয়ার্ক কলের প্রয়োজন পরবে। তাই অ্যাপ্লিকেশনটা পাবলিশ করার আগেই আমাদের উচিত হবে সব কোড গুলোকে মিনিফাই করে, এক জায়গাতে বান্ডেল করে তারপরে পাবলিশ করা।

এই কাজটা যদি আমরা ম্যানুয়ালি করতে চাই, তাহলে আমাদের অনেক সময় লাগবে এবং কাজটাও ভাল ভাবে হবে না। এই জন্য আমাদের হয়ে এই কাজটা সুন্দর ভাবে করে দিচ্ছে Webpack।

Webpack ব্যবহার করে আমরা মূলত অনেক গুলো কাজ করে থাকি -

কোড বান্ডেলিং
মিনিফাইং
সোর্স ম্যাপ তৈরি
ইমেজ এবং কোড অপটিমাইজেশন
সিএসএস মডিউল
ডেভেলপমেন্ট সার্ভার
আরও অনেক কিছু
Webpack মূলত একটা নোডজেএস এর প্যাকেজ যা রান করে নোডজেএস প্লাটফর্মে। আমাদেরকে একটা কনফিগারেশন ফাইল তৈরি করতে হয় প্রজেক্ট অনুযায়ী। তারপরে বিউল্ড কমান্ড দিয়ে আমাদের কনফিগারেশন অনুযায়ী প্রজেক্টটাকে বিউল্ড করতে পারি।

Webpack সম্পর্কে বিস্তারিত জানতে এর অফিশিয়াল ডকুমেন্টেশন ফলো করুন। আর যদি Webpack শিখতে চান তাহলে এই ভিডিওটা দেখে আসতে পারেন। Link: https://youtu.be/PhuwlYrd-XU

https://createapp.dev/  // ekhne jeye webpack, babel ekta environment tyri kora jay




7. Environment Setup Reference
========================================================
আমরা যদি ReactJS এর জন্য একটা কাস্টম এনভাইরনমেন্ট তৈরি করতে যায় তাহলে আমাদের মূলত দুইটা টুলস এর সাহায্য লাগবে। আরও অনেক টুলস আছে যে গুলোও এনভাইরনমেন্ট সেটাপে অনেক ভূমিকা রাখে তবে BabelJS and Webpack ছাড়া এনভাইরনমেন্ট তৈরি করা সম্ভবই না। তবে অনেকেই Webpack এর বদলে Parcel বা অন্য কোন বান্ডেলার বা প্যাকেজ বিউল্ডার ব্যবহার করে থাকেন।

আর একটা খুবই গুরুত্বপূর্ণ একটা টুলস আমাদের দরকার যা ছাড়া এই পুরো প্রজেক্ট সেটাপটা সম্ভবই না। যেই টুলসটা সম্পর্কে আমরা ভিডিওতে কোনো কিছু মেনশন করি নি। সেটা হল নোডজেএস। Webpack, Webpack-Dev-Server, Hot Moudle Replacement এই সব ফিচার গুলোই রান করবে নোডজেএস এনভাইরনমেন্ট এর ওপরে। তাই আমাদের পিসিতে নোডজেএস সফটওয়্যারটা ইন্সটল্ড অবস্থায় থাকাটা খুবই জরুরি। package.json ফাইল, npm, npm scripts এবং dependencies সব কিছুই চলে নোডজেএস এর ওপরে।



আমরা যেই এনভাইরনমেন্টটা তৈরি করেছি সেখানে যে যে ফাইল ছিল সেই এবং যেই ফাইল গুলো আমাদের সব সময় লাগবে সেই ফাইল গুলো সম্পর্কে অল্প ভাষায় কিছু তথ্য দেওয়ার চেষ্টা করছি যেন পরবর্তীতে আপনারা রেফারেন্স হিসেবে কাজে লাগাতে পারেন।

প্রয়োজনীয় ফাইল গুলো -

dist (dir) - এখানে অনেক গুলো ফাইল থাকে। বিশেষ করে স্ট্যাটিক ফাইল গুলোই এখানে রাখা হয়। যেমন -

index.html - সিঙ্গেল পেজ অ্যাপ্লিকেশনে সাধারণত একটা মাত্র এইচটিএমএল ফাইল থাকে। এবং সেটা রাখা হয় স্ট্যাটিক ফাইল হিসেবে। যখন সার্ভার এ কোন রিকুয়েস্ট আসে তখন এই ফাইলটা সার্ভ করা হয়। সাধারণত এর ভিতরে কিছুই থাকে না। React Application ব্রাউজারে লোড হওয়ার পরে ডাটা লোড করে থাকে।
favicon.ico - ওয়েব সাইটের ফেভারিট আইকনটাও সাধারণত এই ডিরেক্টরিতে থাকে।
bundle.js - প্রোডাকশনে ব্যবহার করার পূর্বে অ্যাপ্লিকেশনকে সাধারণত বিউল্ড করা হয়। বিউল্ড করার পরে প্রোডাকশন রেডি যেই অপ্টিমাইজড জাভাস্ক্রিপ্ট ফাইলটা বের হয় সেটাই মূলত bundle.js। বিউল্ড এর সময় ডাইনামিক ভাবে এটা index.html ফাইল এর সাথে লিংকড হয়ে যায়। তাই index.html ফাইল যখন ব্রাউজারে লোড হয় তখন আটোমেটিক্যালি জাভাস্ক্রিপ্ট ফাইলটা পেয়ে যায় এবং জাভাস্ক্রিপ্ট এক্সিকিউট হয়ে ব্রাউজারে কন্টেন্ট রেন্ডার করতে থাকে।
style.css - ছোট ছোট কম্পোনেন্ট কে ডিজাইন করার জন্য যেই স্টাইল ফাইল গুলো ব্যবহার করা হয় সেই গুলো অনেক ক্ষেত্রেই ইনলাইন সিএসএস এর কাজ করে থাকে। তবে গ্লোবাল সিএসএস ফাইল গুলো এবং অন্যান্য সিএসএস ফাইল গুলো বিউল্ড এর পরে একটা ফাইলে রূপান্তর হয়ে যায় এবং অটোমেটিক্যালি index.html ফাইল এর সাথে অ্যাাটাচড হয়ে যায়। এবং যখন ব্রাউজার index.html ফাইলকে লোড করে তখন সিএসএস গুলো লোড হয়ে যায়।
src (dir) - একটা অ্যাপ্লিকেশনের সব থেকে ইম্পরট্যান্ট ডিরেক্টরি হচ্ছে এটা। কারণ এখানেই আমরা আমাদের সমস্ত জাভাস্ক্রিপ্ট এবং সিএসএস কোড লিখে থাকি।

.babelrc (file) - এই ফাইলটা মূলত BabelJS এর কনফিগারেশন ফাইল। আপনি যদি কাস্টম ভাবে BabelJS কে কনফিগার করতে চান, নতুন কোনো রুলস যুক্ত করতে চান তাহলে আপনি এই ফাইলে সেটা করতে পারবেন।

webpack.config.js (file) - Webpack এর সমস্ত কনফিগারেশন আপনাকে এখানে লিখতে হবে। যদি অ্যাপ্লিকেশন রানিং থাকা অবস্থায় আপনি এই ফাইলে কোনো পরিবর্তন করেন তাহলে পরিবর্তনটা বোঝার জন্য আপনাকে অ্যাপ্লিকেশন বা webpack-dev-server রিস্টার্ট করতে হবে।

package.json (file) - এটা আপনার অ্যাপ্লিকেশন এর কনফিগারেশন বা মেনিফেস্ট ফাইল যা আপনার অ্যাপ্লিকেশনের মেটা ইনফরমেশন গুলোকে রাখবে। যেমন ভার্সন নাম্বার, বেসিক ডেসক্রিপশন। এর সাথে সাথে আপনি এই প্রোজেক্টে কোন কোন থার্ড পার্টি লাইব্রেরী বা মডিউল ব্যবহার করেছেন, সে গুলোর ভার্সন নাম্ভার কত সেই সব ইনফরমেশনও সে রাখবে। এখানে আপনি প্রোজেক্টা রান করার, বিউল্ড করার বা টেস্ট করার কমান্ড স্ক্রিপ্ট আকারে লিখে রাখতে পারেন যেন কমান্ড লাইন ইন্টারফেস থেকে সিঙ্গেল কমান্ড ব্যবহার করে আপনার অ্যাপ্লিকেশনটা রান বা বিউল্ড বা টেস্ট করা যায়। একটা অ্যাপ্লিকেশনের সব থেকে গুরুত্বপূর্ণ ফাইল হচ্ছে এটা।

.gitignore (file) - যে কোনো অ্যাপ্লিকেশনে এখন ভার্সন কন্ট্রোল সিস্টেম ব্যবহার করা হয়। ভার্সন কন্ট্রোল সিস্টেম প্রজেক্টের সমস্ত ফাইল ট্রাক করতে থাকে, মাল্টিপল ভার্সন তৈরি করতে থাকে। এর ভিতরে কিছু ফাইল বা ডিরেক্টরি থাকে যা আমাদের ট্রাক করার প্রয়োজন নেই। সেই ফাইল গুলোকে ভার্সন কন্ট্রোল ট্রি থেকে বের করে দেওয়ার জন্য এই ফাইলটা ব্যবহার করা হয়। যেই সব ফাইল বা ডিরেক্টরি এই ফাইলের ভিতরে লিংক করা থাকবে সে গুলোকে ভার্সন কন্ট্রোল সিস্টেম ট্রাক করবে না।

ওপরে যেই ফাইল গুলোর কথা বলা হচ্ছে সে গুলোই হচ্ছে মেইন ফাইল যা একটা বেসিক ReactJS প্রজেক্টের দরকার হয়ে থাকে। এই ফাইল গুলোতে আসলে কি থাকবে সেটা ভাল ভাবে বোঝার জন্য ওই স্পেসিফিক টপিকস সম্পর্কে আরও বিস্তারিত পড়াশোনা করতে হবে। আর একটা বেসিক ওভারভিউ তো আমরা ভিডিও এর মাধ্যমে দেওয়ার চেষ্টা করেছিই। আশা করছি আপনারা ব্যপার গুলো বুঝতে পেরেছেন। যদি বুঝতে পারেন আর যদি নাও বুঝতে পারেন দুই ক্ষেত্রেই ভিডিওতে যেভাবে দেখানো হয়েছে সেভাবে প্রাক্টিক্যাল করে ফেলেন।


// createreactapp // eta jeye react kivabe setup kora jay seta dekha jabe





7. Section References
===============================================================================

এই চ্যাপ্টারে আমরা আলোচনা করেছি Create-React-App, React এর CLI (Command Line Interface) টুলসটা নিয়ে। এই টুলসটা ব্যবহার করে আপনি খুব সহজেই একটা ReactJS অ্যাপ্লিকেশন তৈরি করতে পারবেন। React অ্যাপ্লিকেশনে যা যা ফিচার আপনার দরকার তার সমস্ত সাপোর্ট আপনাকে দিবে Create-React-App।

Create-React-App আপনাকে মূলত নিচের সুবিধা গুলো দিয়ে থাকে -

ডেভেলপমেন্ট সার্ভার
কোড অপটিমাইজেশন
Babel & Webpack বয়লারপ্লেট প্রোজেক্ট সেটআপ
CSS, CSS Module, Sass, Pre and Post CSS এর সাপোর্ট
Image, Fonts and File নিয়ে কাজ করার সহজ সিস্টেম
Flow, Typescript and Relay ইন্টিগ্রেশন
Environment Variable এর ফ্যাসিলিটিস
Testing Environment Using Jest
Proxy ব্যবহার করে সার্ভার ইন্টিগ্রেশন
Built in Development and Production Scripts
উপরউক্ত ফিচার গুলো পাওয়ার জন্য আপনার নিজে থেকে তেমন কিছুই করতে হবে না আবার কিছু ক্ষেত্রে অল্প কিছু কাজ করতে হতেও পারে।

Create-React-App আমাদেরকে চারটি স্ক্রিপ্ট প্রোভাইড করে থাকে -

Start - এই স্ক্রিপ্টের মাধ্যমে আপনি কমান্ড লাইন ইন্টারফেস থেকে আপনার অ্যাপ্লিকেশনটা ডেভেলপমেন্ট সার্ভারে ওপেন করতে পারবেন। এটা আপনার জন্য একটা NodeJS সার্ভার রানিং করবে এবং React অ্যাপ্লিকেশনটাকে স্ট্যাটিক ফাইল হিসেবে সার্ভ করবে। এর সাথে আপনি Hot Module Replacement এর সুবিধাও পাবেন। এই কমান্ডটা আপনি এভাবে ব্যবহার করতে পারেন npm start  অথবা yarn start

Build - যখন আপনার অ্যাপ্লিকেশন ডেপলয় করার জন্য তৈরি হয়ে যাবে তখন আপনি এই কমান্ডটার মাধ্যমে আপনার প্রজেক্ট বিউল্ড করবেন। এটা প্রয়োজন মত আপনার কোডকে

অপ্টিমাইজ করবে
মিনিফাই করবে
সোর্স ম্যাপ তৈরি করবে
CSS ফাইল জেনারেট করবে
ফাইল এবং ইমেজ গুলোকে অপ্টিমাইজ করবে
সোর্স কোড গুলোকে চাংকে রূপান্তর করবে
আরও অনেক কিছু করবে
একটা অ্যাপ্লিকেশন প্রোডাকশনে পাঠানোর জন্য যতটা অপটিমাইজেশনের দরকার হয়, তার সবটাই করবে এই কমান্ডটা এবং এর জন্য আমাদের কোনো কনফিগারেশনের দরকার নেই। তারপরেও কিছু অ্যাপ্লিকেশন আছে যেখানে আমাদের নিজেদের মত করে অপটিমাইজেশনের দরকার পরে, সেই ক্ষেত্রে আমরা নিজেরাও বিউল্ট ইন কনফিগারেশনকে মডিফাই করতে পারব। এর জন্য কমান্ডটা হচ্ছে - npm run build অথবা yarn run build

Test - Create-React-App আমাদেরকে একটা প্রোপার টেস্টিং এনভারনমেন্ট প্রোভাইড করে থাকে। এই এনভাইরনমেন্টে কোন এক্সট্রা টুলস সেটআপ না করেই আমরা React Application টেস্ট করতে পারি। তবে অ্যাডভান্সড টেস্টিং এর জন্য অন্য প্যাকেজ বা মডুউলের সাহায্য লাগবে। টেস্টিং এর কমান্ড হচ্ছে - npm test অথবা yarn test

Eject - আপনি যখন Create-React-App ব্যবহার করে একটা অ্যাপ্লিকেশন তৈরি করবেন তখন সমস্ত কনফিগারেশন ফাইল এবং স্ক্রিপ্ট ফাইল গুলো হিডেন থাকবে। এই সব ফাইল গুলো পেতে চাইলে এই কমান্ডটা ব্যবহার করতে হবে। Create-React-App যেই কনফিগারেশনটা আমাদেরকে দেয় সেটা সবসময় পরিবর্তন করার দরকার হয় না। আর আপনি ভুল করে যেন সেগুলোকে আপডেট করে না ফেলেন এই জন্যই ফাইল গুলোকে হিডেন রাখা হয়। যদি কোনো কারণে আমাদের এই ফাইল গুলো আপডেট করার প্রয়োজন হয় তখন আমরা এই কমান্ডটা ব্যবহার করে থাকি। তবে একবার Eject করার পরে আর চাইলেও Roll Back করে আগের অবস্থানে ফিরে আসা যায় না। তাই একদম নিশ্চিত না হয়ে এই কমান্ডটা ব্যবহার করবেন না। এই কমান্ডটা ব্যবহার করতে হয় এই ভাবে - npm run eject অথবা yarn run eject

[Note: আপনার পিসিতে yarn ইন্সটল করা না থাকলে প্রথমে এই প্যাকেজটা গ্লোবালই ইন্সটল করে নিবেন - npm i -g yarn ]

Create-React-App ব্যবহার করে কোনো অ্যাপ্লিকেশন তৈরি করলে আপনি সেখানে সাধারণ নোড অ্যাপ্লিকেশন এর মত করেই যে কোনো ডিপেন্ডেন্সি ইন্সটল করতে পারবেন, নিজস্ব স্ক্রিপ্টও লিখতে পারবেন।





2. What is Component?
=======================================================
কম্পোনেন্ট কি?
ReactJS এর সব থেকে ছোট এবং সব থেকে গুরুত্বপূর্ণ ফিচার হচ্ছে কম্পোনেন্ট। একটা কম্পোনেন্ট বলতে আসলে একটা জাভাস্ক্রিপ্ট ফাংশন বা জাভাস্ক্রিপ্ট ক্লাস যা ReactJS এর কম্পোনেন্ট ক্লাস এর বৈশিষ্ট্যকে নিজের ভিতরে ধারণ করে তাকে বোঝায়। ReactJS এ কম্পোনেন্ট খুবই ছোট হতে পারে অথবা সাধারণ এইচটিএমএল ফাইল এর মত অনেক বড় হতে পারে। তবে সাধারণত কম্পোনেন্ট গুলোকে লজিক্যাল ছোট ছোট কম্পোনেন্টে ভাগ করে ফেলা হয়। পরে সেই টুকরা টুকরা কম্পোনেন্ট কে জোড়া লাগিয়েই (কম্পোজিশন) একটা বড় প্রজেক্ট করা হয়।

উদারণ সরূপ একটা শপিং কার্টের কথা চিন্তা করা যেতে পারে। এখানে অনেক গুলো প্রডাক্ট এর লিস্ট বা কার্ড ভিউ থাকে। এত গুলো আইটেম React এ তৈরি করতে হয় না। একটা প্রোডাক্ট কম্পোনেন্ট বানিয়ে সেই কম্পোনেন্টাকেই রিইউজ করা হয়। আবার এই কম্পোনেন্টের ভিতরে Add to Cart, Add to Wishlist and Price এর জন্য আরও ছোট ছোট কম্পোনেন্ট বানানো যেতে পারে। ওপরে সার্চ এবং ফিল্টার করার জন্য একটা কম্পোনেন্ট থাকে এবং Cart List দেখার জন্য Cart and List Item কম্পোনেন্ট থাকতে পারে।

এগুলো সবই উদাহরণ, আসলে আপনার প্রজেক্টে কিভাবে কম্পোনেন্ট ডিজাইন করতে হবে সেটা আপনার প্রোজেক্টের রিকুয়ারমেন্টস বলে দিবে। কিন্তু আমি আশা করছি আপনি একটা ক্লিয়ার ধারণা পেয়েছেন যে React এ কম্পোনেন্ট বলতে আসলে কি বোঝানো হয়।

কম্পোনেন্টের ভিতরে কি কি থাকে?
কম্পোনেন্টের মূল কাজ হচ্ছে একটা ছোট্ট অংশের জন্য ইউজার ইন্টারফেস তৈরি করা। ইউজার ইন্টারফেস বলতে আসলে বোঝাতে চাচ্ছি ইন্টারেক্টিভ ইউজার ইন্টারফেস। মানে সেখানে ডাইনামিক কন্টেন্ট থাকতে পারে, ইউজার এর কাছে থেকে ফিডব্যাক একসেপ্ট করতে পারে, বিভিন্ন সাইড ইফেক্ট থাকতে পারে, কন্ডিশনালি তার ভিউটা পরিবর্তন হতে পারে। একটা ভিউ জেনেরেট করাটা একটা কম্পোনেন্ট এর প্রধান কাজ, বাকি কাজ গুলো অপশনাল। কারণ সমস্ত ভিউ যে ইন্টারেক্টিভ হবে এমন কোন কথা নেই, যেমন একটা প্যারাগ্রাফ।

একটা কম্পোনেন্ট কে আমি দুইটা লেয়ার এ ভাগ করে থাকি।

ডাটা এবং লজিক লেয়ার (অপশনাল)
রিপ্রেসেন্টেশন লেয়ার (রিকুয়ারড)
ডাটা এবং লজিক লেয়ারঃ
ReactJS এ সব কিছুই হয় ডাটার ওপরে ভিত্তি করে। আমাদের ভিউটা জেনারেট করতে হবে ডাটার সাথে লিংক রেখে। সময়ের সাপেক্ষে বা বিভিন্ন সাইড ইফেক্টের মাধ্যমে আমরা আমাদের ডাটা গুলোকে পরিবর্তন করলে অটোমেটিক ভাবে ভিউ আপডেট হয়ে যাবে। তাই ReactJS এ যখন আমরা কাজ করব তখন আমাদের প্রথম এবং প্রধান কাজ থাকবে ডাটা লেয়ার নিয়ে এবং এই ডাটা আপডেট করার জন্য বিভিন্ন লজিক দরকার পড়বে। সেই সব কিছু আমরা করব ডাটা এবং লজিক লেয়ারের ভিতরে।

ডাটা এবং লজিক লেয়ার নিয়ে কাজ করার জন্য আমাদের কাছে টোটাল চারটা সিস্টেম আছে -

State - একটা কম্পোনেন্টের নিজস্ব ডাটা রাখা হয় State এর ভিতরে। এটাই সব থেকে গুরুত্বপূর্ণ সিস্টেম ডাটা রাখার। কারণ আপনি স্টেট এর ভিতরে যেই ডাটা গুলো রাখবেন শুধুমাত্র সেই ডাটা পরিবর্তন করলে ভিউটা আপডেট নেবে। অন্য কোনো ভ্যারিয়েবল বা প্রোপার্টিস এর ভ্যালু পরিবর্তন হলেও আমাদের ভিউ এর ওপরে কোন রকম কোন ইফেক্ট পরবে না। এবং State এর ভ্যালু প্রতিটা কম্পোনেন্টের ভিতরেই ভিসিবল, একটা কম্পোনেন্ট স্টেট অন্য কম্পোনেন্ট থেকে এক্সেস করার কোন উপায় নেই।
Variable or Properties - ReactJS এ প্রধাণত দুইভাবে কম্পোনেন্ট তৈরি করা হয়। ক্লাস অথবা ফাংশন ব্যবহার করেই আমরা আমাদের সমস্ত কম্পোনেন্ট বানিয়ে থাকি। অনেক সময় এই ক্লাস বা ফাংশন গুলোর ভিতরে কিছু ভ্যারিয়েবল বা প্রোপার্টিস এর দরকার হয়। যতক্ষণ কম্পোনেন্টটা জীবিত থাকবে ঠিক ততক্ষণ এই ভ্যারিয়েবল এর ভ্যালু গুলোও জীবিত থাকবে। কিন্তু  এই ভ্যারিয়েবল বা প্রোপার্টিস এর ভ্যালু পরিবর্তিত হলে ভিউ পরিবর্তন হবে না।
Methods or Functions - কম্পোনেন্ট এর ভিতরে আমরা আমাদের প্রয়োজন মত, বিভিন্ন লজিক ইমপ্লেমেন্ট করার জন্য বা স্টেট পরিবর্তন করার জন্য বিভিন্ন মেথড বা ফাংশন তৈরি করে থাকি। একটা কম্পোনেন্টের বেশির ভাগ লজিক গুলো থাকে এই রকম ছোটো ছোটো মেথড বা ফাংশনের ভিতরে।
Life Cycle Methods - আমরা নিজেরা নিজের মন মত যখন খুশি তখন ফাংশন বা মেথড বানাতে পারি। কিন্তু একটা কম্পোনেন্ট এর জীবনকালের বিভিন্ন সময়ে এক্সেস নিয়ে আমাদের ডাটা কে বিভিন্ন পরিবর্তন করার জন্য React কিছু লাইফ সাইকেল মেথড প্রোভাইড করে থাকে। এর ফলে একটা কম্পোনেন্ট যখন ক্রিয়েট হয় তখন আমরা কিছু এক্সট্রা কাজ করতে পারি, এছাড়াও কম্পোনেন্ট আপডেট ডিলিট, ডাটা পরিবর্তন এই রকম বিভিন্ন সময়ে কন্ট্রোল টা আমাদের হাতে রাখার জন্য অসংখ্য লাইফ সাইকেল মেথড আছে, যেগুলো ডেভেলপমেন্টে খুবই গুরুত্বপূর্ণ কিছু ভূমিকা পালন করে থাকে।
রিপ্রেসেন্টেশন লেয়ারঃ
ReactJS এ ডাটা লেয়ার খুব গুরুত্বপূর্ণ হলেও ডাটা লেয়ারকে সম্পুর্ণ বাদ দিয়ে আমরা একটা কিছু বানাতে পারি। কিন্তু ভিউ বা রিপ্রেসেন্টেশন লেয়ার বাদ দিয়ে আমরা একটা কম্পোনেন্ট বানাতে পারবো না। ReactJS ব্রাউজারে যে কোনো তথ্য দেখানোর জন্য ব্যবহার করে থাকে JSX. এটা মূলত জাভাস্ক্রিপ্টের এক্সটেন্ডেড সিনট্যাক্স।

ReactJS এ রিপ্রেসেন্টেশন লেয়ারটা স্ট্যাটিক। আমরা একবারই এটা তৈরি করব। পরবর্তিতে সমস্ত কাজ করব ডাটা লেয়ারে। কারণ ডেটা পরিবর্তন হলে অটোমেটিক ভাবেই রিপ্রেসেন্টেশন বা ভিউটা আপডেট হয়ে যাবে।






6. Which Component We Should Pick When?
কখন আমরা কোন ধরনের কম্পোনেন্ট ব্যবহার করব?
ReactJS এ দুই ভাবে কম্পোনেন্ট তৈরি করা যায়। প্রথমত ক্লাস ব্যবহার করে। এই কম্পোনেন্ট গুলোতে নিজস্ব ডাটা এবং ফাংশনালিটিস নিয়ে কাজ করা যায়, লাইফ সাইকেল মেথড নিয়ে কাজ করা যায়। কিন্তু এই কম্পোনেন্ট গুলো একটু জটিল প্রকৃতির হয়ে থাকে। নিমেষেই অনেক কোড হয়ে যায় এই কম্পোনেন্ট গুলোতে। দ্বিতীয়ত ফাংশন ব্যবহার করে। এই কম্পোনেন্ট গুলো খুবই সহজ প্রকৃতির হয়ে থাকতে। দেখতেও সহজ মনে হয় আবার বানাতেও সহজ মনে হয়। এই কম্পোনেন্ট বানানোর জন্য নতুন কোনো থিওরি জানার প্রয়োজন হয় না। শুধুমাত্র জাভাস্ক্রিপ্টের একটা ফাংশন তৈরি করে JSX রিটার্ন করলেই সেটা ফাংশনাল কম্পোনেন্ট হয়ে যায়।

তাহলে আমরা কোন কম্পোনেন্টটা ব্যবহার করব? ফাংশনাল নাকি ক্লাস বেসড? ডাম্ব নাকি স্মার্ট?

এই প্রশ্নের উত্তর সহজে দেওয়াটা একটু কঠিন। আপনার প্রজেক্টের রিকুয়ারমেন্ট অনুযায়ী, কম্পোনেন্ট কি কাজ করবে, কম্পোনেন্ট এর কোন সাইড ইফেক্ট আছে কি না, এরকম অনেক বিষয়ের ওপরে ভিত্তি করে ডিসিশন নিতে হয় যে কোন ধরনের কম্পোনেন্ট আমাদের ব্যবহার করা উচিৎ।

তবে আমি এখানে আপনাদের জন্য একটা সিম্পল সমাধান দেওয়ার চেষ্টা করছি। যদি আপনার কম্পোনেন্টটা একটা ভিউ জেনারেট করা ছাড়া কোনো ইন্টারনাল কাজ না করে থাকে, অর্থাৎ আপনার কম্পোনেন্টের শুধু দুইটাই রেস্পন্সিব্লিটি থাকে,  সে শুধু JSX রিটার্ন করবে আর প্রয়োজন বোধে Props আকারে ডাটা গ্রহণ করবে তাহলে আপনি নিঃসন্দেহে ফাংশনাল কম্পোনেন্ট ব্যবহার করতে পারেন। বাকি সমস্ত ক্ষেত্রে ক্লাস বেসড কম্পোনেন্ট নিয়ে কাজ করতে হবে।

বিঃ দ্রঃ এই কথা গুলো শুধু বিগিনার এবং যারা React Hooks নিয়ে কাজ করে না তাদের জন্য প্রযোজ্য। পরবর্তীতে আমরা ফাংশনাল কম্পোনেন্টের অ্যাডভান্সড ব্যবহার দেখব।






9. JSX Quick References
ReactJS এর অন্যতম একটা ফিচার হচ্ছে JSX. প্রথম দিকে দেখলে মনে হয় জাভাস্ক্রিপ্ট কোডের ভিতরে এইচটিএমএল কোড কি করছে? কিন্তু আসলে JSX মানে জাভাস্ক্রিপ্টের ভিতরে এইচটিএমএল কোড না।

JSX - Javascript Extension

এটা ReactJS এর স্পেশাল একটা সিনট্যাক্স। এটা শুধু দেখতেই এইচটিএমএল এর মত। কিন্তু BabelJS এই সিনট্যাক্স কে কনভার্ট করে পিউর জাভাস্ক্রিপ্ট কোডে রূপান্তর করে দেই। আমরা ইচ্ছে করলেই JSX বাদ দিয়ে শুধু জাভাস্ক্রিপ্ট কোড ব্যবহার করেও অ্যাপ্লিকেশন বানাতে পারি। কিন্তু এই ক্ষেত্রে আমাদের কোডটা অনেক বেশি ভার্বোস হয়ে যাবে। এবং কোড ম্যানেজ করতে অনেক কষ্ট হবে। উদাহরণ সরূপ নিজের ডিভ টার কথা চিন্তা করা যা -

<div> I am div </div>

এই কোডটা BabelJS কনভার্ট করার পরে ঠিক এমন হবে দেখতে -

React.createElement('div', null, 'I am div')

ওপরের উদাহরণ থেকে এটা নিশ্চয়ই আপনি বুঝতে পারছেন JSX কতটা সহজ এবং কেন React JSX এর মত একটা ফিচার নিয়ে এসেছে।

JSX ব্যবহার করতে চাইলে এর আরও কিছু বৈশিষ্ট্য সম্পর্কে আপনাদের অবগত থাকতে হবে। যেমন -

যেখানেই আপনি JSX কোড ব্যবহার করেন না কেন ওই ফাইলে React কে ইম্পোর্ট করে নিতে হবে। যদি স্কোপের ভিতরে React না থাকে তাহলে আপনার কম্পাইলার আপনাকে ইরর শো করবে।
আপনি render মেথড থেকে অথবা ফাংশনাল কম্পোনেন্ট থেকে যখন কোন JSX রিটার্ন করবেন তখন আপনি রুট লেভেল এ শুধু মাত্র একটি এলিমেন্ট রাখতে পারবেন। এই রুট এলেমেন্টের ভিতরে যদি একাধিক চিলড্রেন থাকে তাহলে কোন প্রব্লেম নেই। কিন্তু শুধু মটর একটি JSX এলিমেন্টই আপনি রিটার্ন করতে পারবেন।
আপনি JSX কোডের ভিতরে ডট নোটেশন ব্যবহার করতে পারবেন যেমনটা আপনি জাভাস্ক্রিপ্ট অবজেক্টের সাথে করতে পারেন।
JSX কোডের ভিতরে আপনি যে কোনো জাভাস্ক্রিপ্ট কোড লিখতে পারবেন। এর জন্য আপনাকে ওপেনিং কার্লি { এবং ক্লোসিং কার্লি } এর ভিতরে জাভাস্ক্রিপ্ট কোডটা লিখতে হবে। তবে মনে রাখবেন, এর ভিতরে আপনি শুধু মাত্র একটি জাভাস্ক্রিপ্ট স্টেটমেন্টই এক্সিকিউট করতে পারবেন। ফাংশন, লুপ বা কন্ডিশন এখানে ব্যবহার করা যাবে না। তবে অ্যারো ফাংশন, ভ্যারিয়েবল ডিক্লারেশন, ফাংশন কল, কন্ডিশনাল অপারেটর এই গুলো ব্যবহার করা যাবে।
আপনি যে কোন JSX কোডকে ভ্যারিয়েবল এর ভিতরে স্টোর করতে পারেন। আবার যে কোন ফাংশন থেকে রিটার্নও করতে পারেন। তাই যদি অন্য কোন সাধারণ ফাংশন আপনার জন্য ভিউ জেনারেট করে থাকে তাহলে সেই ফাংশন টা আপনি JSX এর ভিতরে কল করতে পারবেন।
JSX এর চিলড্রেন হিসেবে আপনি যে কোনো সিঙ্গেল এলিমেন্ট অথবা যে কোন অ্যারে প্রোভাইড করতে পারেন। যদি কোন এলিমেন্ট না থাকে সেই ক্ষেত্রে আপনি null প্রোভাইড করতে পারেন। যদি JSX এর চাইল্ড হিসেবে null প্রভাইড করা হয় তাহলে JSX কোন কিছুই রেন্ডার করবে না।
আমরা JSX এর ভিতরে অ্যাট্রিবিউট এর মত করে Props পাস করতে পারি। আবার আমরা একটা Props অবজেক্টকে স্প্রেড অপারেটর ব্যবহার করে JSX এর ভিতরে পাস করতে পারি।
JSX এর ভিতরে false, null, undefined, true সিম্পলই ইগনোরড হয়ে যাবে। এই Boolean ভ্যালু গুলো আমাদের দরকার হয় কন্ডিশনাল ভাবে কোন কিছু রেন্ডার করার কাজে।
JSX সম্পর্কে এই বিষয় গুলো জানা থাকলেই আমরা সব ধরনের সিসুয়েশন এর মোকাবেলা করতে পারব। তবে সব কিছু মনে রাখার জন্য আপনার প্রচুর প্র্যাকটিস করতে হবে।




9. JSX Quick References
===============================================
ReactJS এর অন্যতম একটা ফিচার হচ্ছে JSX. প্রথম দিকে দেখলে মনে হয় জাভাস্ক্রিপ্ট কোডের ভিতরে এইচটিএমএল কোড কি করছে? কিন্তু আসলে JSX মানে জাভাস্ক্রিপ্টের ভিতরে এইচটিএমএল কোড না।

JSX - Javascript Extension

এটা ReactJS এর স্পেশাল একটা সিনট্যাক্স। এটা শুধু দেখতেই এইচটিএমএল এর মত। কিন্তু BabelJS এই সিনট্যাক্স কে কনভার্ট করে পিউর জাভাস্ক্রিপ্ট কোডে রূপান্তর করে দেই। আমরা ইচ্ছে করলেই JSX বাদ দিয়ে শুধু জাভাস্ক্রিপ্ট কোড ব্যবহার করেও অ্যাপ্লিকেশন বানাতে পারি। কিন্তু এই ক্ষেত্রে আমাদের কোডটা অনেক বেশি ভার্বোস হয়ে যাবে। এবং কোড ম্যানেজ করতে অনেক কষ্ট হবে। উদাহরণ সরূপ নিজের ডিভ টার কথা চিন্তা করা যা -

<div> I am div </div>

এই কোডটা BabelJS কনভার্ট করার পরে ঠিক এমন হবে দেখতে -

React.createElement('div', null, 'I am div')

ওপরের উদাহরণ থেকে এটা নিশ্চয়ই আপনি বুঝতে পারছেন JSX কতটা সহজ এবং কেন React JSX এর মত একটা ফিচার নিয়ে এসেছে।

JSX ব্যবহার করতে চাইলে এর আরও কিছু বৈশিষ্ট্য সম্পর্কে আপনাদের অবগত থাকতে হবে। যেমন -

যেখানেই আপনি JSX কোড ব্যবহার করেন না কেন ওই ফাইলে React কে ইম্পোর্ট করে নিতে হবে। যদি স্কোপের ভিতরে React না থাকে তাহলে আপনার কম্পাইলার আপনাকে ইরর শো করবে।
আপনি render মেথড থেকে অথবা ফাংশনাল কম্পোনেন্ট থেকে যখন কোন JSX রিটার্ন করবেন তখন আপনি রুট লেভেল এ শুধু মাত্র একটি এলিমেন্ট রাখতে পারবেন। এই রুট এলেমেন্টের ভিতরে যদি একাধিক চিলড্রেন থাকে তাহলে কোন প্রব্লেম নেই। কিন্তু শুধু মটর একটি JSX এলিমেন্টই আপনি রিটার্ন করতে পারবেন।
আপনি JSX কোডের ভিতরে ডট নোটেশন ব্যবহার করতে পারবেন যেমনটা আপনি জাভাস্ক্রিপ্ট অবজেক্টের সাথে করতে পারেন।
JSX কোডের ভিতরে আপনি যে কোনো জাভাস্ক্রিপ্ট কোড লিখতে পারবেন। এর জন্য আপনাকে ওপেনিং কার্লি { এবং ক্লোসিং কার্লি } এর ভিতরে জাভাস্ক্রিপ্ট কোডটা লিখতে হবে। তবে মনে রাখবেন, এর ভিতরে আপনি শুধু মাত্র একটি জাভাস্ক্রিপ্ট স্টেটমেন্টই এক্সিকিউট করতে পারবেন। ফাংশন, লুপ বা কন্ডিশন এখানে ব্যবহার করা যাবে না। তবে অ্যারো ফাংশন, ভ্যারিয়েবল ডিক্লারেশন, ফাংশন কল, কন্ডিশনাল অপারেটর এই গুলো ব্যবহার করা যাবে।
আপনি যে কোন JSX কোডকে ভ্যারিয়েবল এর ভিতরে স্টোর করতে পারেন। আবার যে কোন ফাংশন থেকে রিটার্নও করতে পারেন। তাই যদি অন্য কোন সাধারণ ফাংশন আপনার জন্য ভিউ জেনারেট করে থাকে তাহলে সেই ফাংশন টা আপনি JSX এর ভিতরে কল করতে পারবেন।
JSX এর চিলড্রেন হিসেবে আপনি যে কোনো সিঙ্গেল এলিমেন্ট অথবা যে কোন অ্যারে প্রোভাইড করতে পারেন। যদি কোন এলিমেন্ট না থাকে সেই ক্ষেত্রে আপনি null প্রোভাইড করতে পারেন। যদি JSX এর চাইল্ড হিসেবে null প্রভাইড করা হয় তাহলে JSX কোন কিছুই রেন্ডার করবে না।
আমরা JSX এর ভিতরে অ্যাট্রিবিউট এর মত করে Props পাস করতে পারি। আবার আমরা একটা Props অবজেক্টকে স্প্রেড অপারেটর ব্যবহার করে JSX এর ভিতরে পাস করতে পারি।
JSX এর ভিতরে false, null, undefined, true সিম্পলই ইগনোরড হয়ে যাবে। এই Boolean ভ্যালু গুলো আমাদের দরকার হয় কন্ডিশনাল ভাবে কোন কিছু রেন্ডার করার কাজে।
JSX সম্পর্কে এই বিষয় গুলো জানা থাকলেই আমরা সব ধরনের সিসুয়েশন এর মোকাবেলা করতে পারব। তবে সব কিছু মনে রাখার জন্য আপনার প্রচুর প্র্যাকটিস করতে হবে



17. Props Quick References
=======================================
ReactJS এ খুব অল্প কিছু কোর ফিচারস আছে, তার ভিতরে Props অন্যতম একটা ফিচার। Props এর প্রধান কাজ হচ্ছে Parent কম্পোনেন্ট থেকে Child কম্পোনেন্টের কাছে ডাটা পাস করা। Props ব্যবহার করে আমরা যে কোন কম্পোনেন্টকে reusable করতে পারি।

Props ব্যবহার করা খুবই সহজ -

যে কোন কম্পোনেন্ট ব্যবহার করার সময় অ্যাট্রিবিউট আকারে আমরা যে কোন ডাটা পাঠাতে পারি Child কম্পোনেন্টের কাছে। এই অ্যাট্রিবিউট গুলোই Child কম্পোনেন্ট থেকে এক্সেসিবল এবং এগুলো থাকবে Props নামের একটা অবজেক্টের ভিতরে।
ক্লাস বেসড কম্পোনেন্টের ক্ষেত্রে আমাদের কোনো Props প্রোপার্টি নেওয়ার দরকার নেই। যখন আমরা ক্লাসের সাথে Component ক্লাসকে ইনহেরিট করি তখন এই প্রোপার্টিটা যুক্ত হয়ে যায়।
ফাংশনাল কম্পোনেন্টের ক্ষেত্রে Props গুলো ফাংশনের প্যারামিটার আকারে পাওয়া যায়।
প্রতিটা Props এর একটা children প্রোপের্টি থাকে। যার মাধ্যমে আমরা কম্পোনেন্টটা কল করার সময় তার ভিতরে চিলড্রেনও পাঠাতে পারি। এবং এই চিলড্রেন JSX এর যে কোন জায়গায় ব্যবহার করা যায়।
আমরা Props এর মাধ্যমে যে কোন ভ্যালূ বা ফাংশন পাস করতে পারি।





18. Understanding Component Tree
===========================================
আপনি যদি একটু ভাল ভাব লক্ষ্য করেন তাহলে দেখবেন ReactJS এর কম্পোনেন্ট গুলো একটা ট্রি ডাটা স্ট্রাকচারের মত ব্যবহার করে। Parent Component কে আপনি এই ট্রি এর রুট বা মূল ধরতে পারেন। আর Child Component গুলো ব্রাঞ্চ বা শাঁখা প্রশাখা। আপনি খুব সহজেই Parent Component থেকে Child Component এর কাছে Props এর মাধ্যমে ডাটা পাস করতে পারবেন। কিন্তু কখনোই Child Component থেকে Props এর মাধ্যমে Parent Component এর কাছে ডাটা পাস করতে পারবেন না।

যে কোন Component বানানোর পূর্বে আপনাকে বড় কম্পোনেন্ট টাকে বের করে নিতে হবে। তার পরে সেখান থেকে আর ছোট কি কি Component বের করা যায় সেটা নিয়ে ভাবতে হবে। যেহেতু Child Component থেকে ডাটা Parent Component এ পাঠানো যায় না, তাই আমাদেরকে Component এর মেইন ডাটাটা Parent Component এর ভিতরে রাখতে হবে এবং Props আকারে Child Component এ পাস করতে হবে। Child Component থেকে ডাটা Parent Component এ পাস করা না গেলেও আমরা Child Component থেকে Parent Component এর যে কোন ফাংশন কল করতে পারি। আর এভাবেই আমরা Parent Component এর ডাটা পরিবর্তন করতে পারব। সেক্ষেত্রে Parent Component এ ডাটা পরিবর্তন করার জন্য প্রয়োজনীয় ফাংশন তৈরি করে রাখতে হবে এবং যখন Child Component টা কল করা হবে তখন Props আকারে ফাংশন গুলোকে Child এর কাছে পাঠিয়ে দিতে হবে। প্রয়োজন অনুসারে Child Component ফাংশন গুলোকে কল করবে, এবং Parent Component এ ডাটা পরিবর্তন হবে যাবে।

আপনারা যদি আমাদের এক্সাম্পল এর দিকে লক্ষ্য করেন তাহলে দেখবেন, আমরা প্রথমে বড় একটা Component বানাই যার নাম দেই Profile. পরে এই বড় Component কে ছোট ছোট অনেক গুলো Component এ ভাগ করে ফেলি। মেইন ডাটা গুলো আমরা Parent Component মানে Profile Component এর ভিতরেই রাখি এবং Props এর মাধ্যমে Child Component গুলোর কাছে পাঠিয়ে দেই। Child Component গুলোকে সব সময় Loosly Coupled করার চেষ্টা করবেন যেন অন্য যে কোনো Component থেকে এই Component গুলোকে ব্যবহার করা যায়।

আমাদের এক্সাম্পল এ Profile Component টা হচ্ছে Parent Component বা ট্রি এর রুট। এর তিনটা Child Component বা শাঁখা আছে।

Bio Component
Skills Component
Links Component
এই শাঁখা Component গুলোর আবার অসংখ্য প্রশাখা Component থাকতে পারে। তবে Component Design করার পূর্বে অবশ্যই Component এর জন্য একটা ট্রি ডিজাইন করে নিবেন। তাহলে Component টা বানাতে বা কিভাবে Child Component এর কাছে ডাটা পাস করবেন সেই বিষয়টা ভাবতে অথবা কোন Component এর কাছে মেইন ডাটা গুলো রাখবেন সে গুলো সিদ্ধান্ত নিতে কোন সমস্যা হবে না।








19. Section References
এই সেকশনটা খুবই গুরুত্বপূর্ণ একটা সেকশন। এখানে ReactJS এর সব থেকে গুরুত্বপূর্ণ তিনটা বিষয় নিয়ে আলোচনা করা হয়েছে। এই বিষয় গুলো ক্ষুদ্রতম থেকে শুরু করে বৃহৎ সব অ্যাপ্লিকেশনের জন্য মুখ্য বিষয়। তাই খুব ভাল করে বিষয় গুলো আয়ত্ত করতে হবে।

এই সেকশনে আমরা আলোচনা করেছি -

Components
Class Based / Stateful / Smart Componet
Functional / Stateless / Dumb Component
Component Tree
JSX - Javascript Extensions
Props
উপরুক্ত বিষয় গুলো ভাল ভাবে বোঝার জন্য আমরা কিছু প্র্যাকটিস প্রব্লেম দিয়ে দিচ্ছি, সেই প্রব্লেম গুলো সমাধান করতে পারেন। আর রেফারেন্স হিসেবে ReactJS এর অফিসিয়াল সাইটটাই ব্যবহার করতে পারেন।




20. Practice Problems (Component, JSX and Props)
========================================================
প্র্যাকটিস প্রব্লেম ১ঃ

Profile Component এর ভিতরে আমরা Bio and Skills Component কে reusable করেছিলাম Props ব্যবহার করে। আপনারা Links Component কে reusable করবেন।

প্র্যাকটিস প্রব্লেম ২ঃ

আপনাকে একটা Navigation Bar Component তৈরি করতে হবে। যেখানে লেফট সাইডে থাকবে লোগো এবং ব্রান্ড এর নাম। সেন্টার পজিশনে থাকবে একটা সার্চ বক্স এবং রাইটে থাকবে অনেক গুলো লিংক। প্রতিটা লিংকের সাথে একটা করে লোগো থাকবে। আপাতত লোগো গুলোর Online URL ব্যবহার করবেন। চার থেকে পাঁচটা লিংক থাকবে। এবার এই Component এর ট্রি স্ট্রাকচারটা বানাবেন। তারপরে এই স্ট্রাকচার দেখে Component গুলো বানাবেন। Main Component এর কাছে সমস্ত ডাটা অবজেক্ট আকারে থাকবে এবং স্টাইল শিট এখানেই লিংক করবেন।

প্র্যাকটিস প্রব্লেম ৩ঃ

আপনাকে অনেক গুলো কার্ড ব্যবহার করে পোস্টের লিস্ট বানাতে হবে। যেখানে প্রতিটা পোস্টে টাইটেল, অল্প একটু ডেস্ক্রিপশপন, সময় এবং তারিখ, অথর এর নাম এবং পোস্টের একটা থাম্বনেইল ইমেজ, কার্ডের নিচের দিকে লেফট সাইডে লাইক এবং ডিসলাইক কাউন্ট (সাথে আইকন) এবং রাইট সাইডে Learn More বাটন থাকবে। এরকম কয়েকটা পোস্ট আপনাকে শো করতে হবে।

প্র্যাকটিস প্রব্লেম ৪ঃ

ইউটিউবে ReactJS Component লিখে সার্চ করবেন। এখানে অনেক গুলো ভিডিও এর কার্ড আসবে। প্রথম ভিডিও এর কার্ডটা ডিজাইন করবেন। Dummy Data ব্যবহার করে করবেন। এর পরে এই কম্পোনেন্টটা ৫-১০ তা ভিডিও এর জন্য রিইউজ করবেন। অবশ্যই Dummy Data এর Array টা Main Component এ রাখতে হবে।

নোটঃ যেখানে যেখানে Code Reusable করা সম্ভব সেখানেই Code Reuse করতে হবে। কোনো রকম কোন ফাংশনালিটি ইমপ্লিমেন্ট করার দরকার নেই। শুধু মাত্র ভিউটা জেনারেট করতে হবে। আর ভিউ জেনারেট করার ক্ষেত্রে Props এর সাহায্য নিতে হবে। কোন Component এই সরাসরি ডাটা বসিয়ে দেওয়া যাবে না। ডাটা গুলোকে একটা ভ্যারিয়েবল এর ভিতরে অবজেক্ট বা অ্যারে হিসেবে রাখতে হবে। এবং সেখান থেকে JSX এর ভিতরে ব্যবহার করতে হবে অথবা Props আকারে পাস করে দিতে হবে। প্রব্লেম সল্ভড হওয়ার পরে প্রিমিয়াম গ্রুপে প্রব্লেম এর ডেসক্রিপশন সহ সল্যুশন পোস্ট করতে হবে। এই ক্ষেত্রে কোড Github or CodeSandbox (preferred) এ রেখে লিংক শেয়ার করতে হবে। কোন কিছু তে প্রব্লেম মনে হলে Facebook Premium Group এ পোস্ট করাই শ্রেয়।



7. Section Reference
==============================================
ReactJS এর সব থেকে গুরুত্বপূর্ণ এবং অদ্ভুত বিষয় হচ্ছে State, দেখতে ক্লাস প্রোপার্টি এর মত। সাধারণ একটা জাভাস্ক্রিপ্টের অবজেক্ট। কিন্তু এর ভিতরে কিছু ম্যাজিক্যাল পাওয়ার রয়েছে।

আমরা জানি ReactJS এ সব কিছু করতে হয় ডাটা এর ওপরে ভিত্তি করে। ডাটা থেকে ভিউ জেনেরেট করতে হয়, কোন ভাবে যদি ডাটাটা পরিবর্তন করা যায় তাহলে ভিউটা নিজে থেকেই আপডেট হয়ে যায়। কিন্তু সাধারণ ভাবে আমরা যদি কোন ভ্যারিয়েবল এর ভিতরে ডাটাটা রাখি তাহলে ডাটা পরিবর্তিত হলেও ভিউ পরিবর্তন হবে না। একটা special ভ্যারিয়েবলের ভিতরেই ডাটাটা রাখতে হবে। আর সেই special ভ্যারিয়েবল বা ক্লাস প্রোপার্টি হচ্ছে State.

React এর State কিভাবে কাজ করে?

React এ State একটা immutable object, একটা নির্দিষ্ট ফাংশন কল করার মাধ্যমেই আমরা State কে পরিবর্তন করতে পারি। সেই ফাংশনটার নাম হচ্ছে setState। এই ফাংশন কল করার মাধ্যমে আমরা যখন কোন State পরিবর্তন করি তখন React আবার render মেথডকে কল করে এবং কল করার সময় State এর নতুন ডাটাটা পাঠিয়ে দেই। render মেথড কল হওয়ার ফলে JSX গুলো আবার রেন্ডার হয় ব্রাউজারে। এভাবেই মূলত State পরিবর্তনের কারণে আমরা নতুন ভিউ দেখতে পাই। কিন্তু অন্য কোন ভ্যারিয়েবল বা ক্লাস প্রোপার্টি পরিবর্তন হলে React render মেথড কে রিকল করে না। তাই ভ্যারিয়েবলের ভ্যালূ পরিবর্তিত হলেও ভিউ আগেরটাই থেকে যায়।

State কিভাবে ডিফাইন করতে হয়?

State আর দশটা ক্লাস প্রোপার্টির মতই একটা প্রোপার্টি যা আগে থেকেই ডিফাইন করা আছে Component ক্লাসের ভিতরে। তাই State ডিফাইন করার জন্য special কোন মেথড বা সিনট্যাক্স এর দরকার নেই। একটা সাধারণ প্রোপার্টি যে ভাবে ডিফাইন করতে হয়, ঠিক একই ভাবে আমরা State ও ডিফাইন করতে পারি। React এর পুরাতন ভার্সন গুলোতে State ডিফাইন করতে হত কন্সট্রাক্টরের ভিতরে। নতুন ভার্সনে আমরা ক্লাসের যে কোন জায়গায় ভ্যারিয়েবল ডিফাইন করার মত করে State ডিফাইন করতে পারি।

State কিভাবে আপডেট করতে হয়?

State আপডেট করতে হয় Immutable ভাবে, যদিও State দেখতে জাভাস্ক্রিপ্টের সাধারণ অবজেক্টের মত, তারপরেও আমরা সাধারণ অবজেক্টের মত করে State পরিবর্তন করতে পারব না। যদি আমরা সেটা করি তাহলে আমাদের কম্পাইলার কোন ইরর থ্রো করবে না। তবে তখন State সাধারণ অবজেক্ট এর মত ব্যবহার করবে। অর্থাৎ ভ্যালু পরিবর্তন হলেও ভিউ পরিবর্তিত হবে না।

State পরিবর্তন করার জন্য React আমাদেরকে setState ফাংশন দিয়েছে। এই setState ফাংশনটা একটা Asynchronous ফাংশন। এই ফাংশন এ আমরা দুইটা আর্গুমেন্ট পাস করতে পারি।

প্রথম আর্গুমেন্ট হিসেবে আমরা একটা অবজেক্ট পাস করতে পারি, যেই অবজেক্টটা তে স্টেটের আপডেটেড ভ্যালু থাকবে। অথবা আমরা একটা Annonymous ফাংশন পাস করতে পারি, যেই ফাংশন আপডেটেড অবজেক্টটা রিটার্ন করবে। দুই ক্ষেত্রেই আমরা অবজেক্ট এর ভিতরে শুধু সেই প্রোপার্টি গুলোকেই রাখব যেগুলো আপডেট করতে চাচ্ছি। State এ যদি আরও বেশি প্রোপার্টি থাকে তাহলেও আমাদের এক্সট্রা প্রোপার্টি পাস করতে হবে না। React আমাদের জন্য অন্য প্রোপার্টি গুলোর ভ্যালু অপরিবর্তিত রাখবে।

দ্বিতীয় আর্গুমেন্ট আকারে আমরা একটা অপশনাল ফাংশন পাস করতে পারি। যেহেতু setState মেথডটা Asynchronous তাই অনেক সময় আমরা আমাদের কাংখিত রেসাল্ট দেখতে পাব না। অনেক সময় আমরা Previous State টাই রেসাল্টে পাব। যদি এমন কোন কিছু দরকার হয় যে, State আপডেট হওয়ার পরেই কোন একটা কাজ করতে হবে সেই কাজটা করার জন্য বেস্ট জায়গা হচ্ছে এই ফাংশনটা








8. Practice Problem
=================================================================
১। এই চ্যাপ্টারে যেই প্রোজেক্টটা করে দেখানো হয়েছে সেই প্রোজেক্টার সাথে মিনিট যুক্ত করতে হবে। প্রজেক্টটাকে লজিক্যাল কম্পোনেন্টে ভাগ করতে হবে।

২। একটা ক্যালকুলেটর বানাতে হবে, যেখানে প্রতিটা নাম্বার একটা বাটনের মাধ্যমে ইনপুট নিতে হবে। চারটা অপারেশন ঘটানো যাবে, যোগ বিয়োগ গুন ভাগ এবং একটা ডিসপ্লে থাকবে যেখানে আউটপুট দেখা যাবে। অবশ্যই লজিক্যাল কম্পোনেন্ট এবং প্রপস ব্যবহার করতে হবে।





7. Which Method We Should Use?
আমরা এতক্ষণ অনেক গুলো ডিফারেন্ট মেথড সম্পর্কে জেনেছি যেগুলো ব্যবহার করে আমরা React অ্যাপ্লিকেশনে Style অ্যাপ্লাই করতে পারি। তবে এখন নিশ্চয়ই আপনাদের মনে একটি প্রশ্ন ঘুরপাক খাচ্ছে যে আমরা কোন মেথডটি ব্যবহার করতে পারি? আপনার সব গুলো মেথডই ব্যবহার করতে পারেন। তবে সব ধরনের কাজের জন্য একটি নির্দিষ্ট মেথড ব্যবহার করাটা বুদ্ধিমানের কাজ হবে না। তাই আমি নিচে ছোট্ট করে ব্যাখ্যা করার চেষ্টা করছি যে কোন সময় কোন মেথডটি ব্যবহার করবেন।

Inline CSS: এই ক্ষেত্রে আমরা JSX এর ভিতরে style attribute এর মাধ্যমে css লিখে থাকি যা সরাসরি এলিমেন্টকে এফেক্টেড করে। এই css রুলস গুলো কোন ভাবেই অন্য কোন এলিমেন্টকে এফেক্টেড করতে পারেনা আবার একে রিইউজও করা যায় না। তাই বড় কোন কাজে inline css লেখাটা ঠিক হবে না। তারপরে আবার inline এ psudo class বা media queries লেখা সম্ভব নয়।

External CSS: যদি আপনি css ব্যবহার করতেই চান তাহলে external css ব্যবহার করাই শ্রেয়, কারণ এখানে আপনি css এর সব গুলো ফিচার ব্যবহার করতে পারছেন। তবে এই ক্ষেত্রে নেমিং কনফ্লিকশন হওয়ার একটা চান্স থেকে যায়। তাই আমাদের উচিত হবে scoped css বা css module ব্যবহার করা।

CSS Module: আমার মতে সব থেকে ভাল সমাধান হচ্ছে css module ব্যবহার করা। এতে আপনি সব দিক থেকেই সেফ থাকবেন এবং css এর সমস্ত ফিচার ও ব্যবহার করতে পারবেন।

Styled Component: এটা একটা ভাল সমাধান যদিও আমরা এই কোর্সে এটা নিয়ে আলোচনা করি নি। তবে আপনি যদি জাভাস্ক্রিপ্টের ভিতরেই css লিখতে চান তাহলে আমার মনে হয় এটাই সব থেকে সহজ এবং সুন্দর সমাধান। আপনি যদি বেসিক React শিখে ফেলেন তাহলে এটা শেখার জন্য আপনাকে খুব বেশি কষ্ট করতে হবে না।


// Style-component // eta ekta module sytle er jonno
==========================================





7. Event Reference
Event কি?
জাভাস্ক্রিপ্টে Event হচ্ছে একটা অবজেক্ট যা একটা নির্দিষ্ট সময়ে কোন একটা কাজ ঘটে যাওয়া সম্পর্কিত যাবতীয় তথ্য ধারণ করে থাকে। সাধারণত ইভেন্টের সাথে অ্যাসোসিয়েটেড কোড গুলো প্রোগ্রাম রান করার সাথে সাথেই এক্সিকিউট হয় না। কোন নির্দিষ্ট কোন কাজ ঘটলে তারপরে কোড গুলো এক্সিকিউট হয়। এই জন্য আমাদের ব্রাউজারকে সব সময় একটিভ থাকতে হয় এবং চেক করতে হয় যে কোন ইভেন্ট ঘটলো কিনা। ব্যাপারটাকে আর একটু বিস্তারিত ভাবে বোঝার চেষ্টা করি -

প্রতিটা ইভেন্টের একটা নির্দিষ্ট নাম এবং বৈশিষ্ট্য রয়েছে। যেমন ক্লিক ইভেন্ট, শুধুমাত্র যখন কোন ইউজার ওই এলিমেন্টের ওপরে মাউস দিয়ে ক্লিক করবেন শুধু মাত্র তখনই এর সাথে এসোসিয়েটেড কোড এক্সিকিউট হবে। মাউসওভার ইভেন্ট, এলিমেন্টের ওপরে মাউস কার্সর নিয়ে গেলে ইভেন্টটা একটিভেট হবে। স্ক্রোল ইভেন্ট, যখন ইউজার স্ক্রোল করবে তখন ইভেন্টটা একটিভেট হবে। এরকম অসংখ্য ইভেন্ট রয়েছে। একটা এলিমেন্টের সাথে একই সময়ে অসংখ্য ইভেন্ট যুক্ত করা যায়। তবে একটি এলিমেন্টের সাথে একটি ইভেন্ট একবারই যুক্ত করা যায়।

ইভেন্টের নামের সাথে সাথে প্রতিটা ইভেন্ট ঘটলে কিভাবে সেটাকে আমরা হ্যান্ডেল করব তার জন্য একটি করে হ্যান্ডেলার ফাংশনও অ্যাসোসিয়েটেড আছে। ডিফল্টভাবে সেটা null থাকে এবং আমরা আমাদের প্রয়োজন মত তাকে ওভাররাইড করে নিতে পারি। এই ফাংশনগুলোর ডিফল্ট ভাবে event অবজেক্ট কে আর্গুমেন্ট আকারে পেয়ে থাকে, যেখানে আমরা ইভেন্টের সাথে রিলেটেড সমস্ত তথ্য পেয়ে থাকি।

আমাদের ব্রাউজার সব সময় ওয়াচ মোডে থাকে, যার ফলে যখনই কোন ইভেন্ট ঘটে সে ওই ইভেন্টের সাথে এসোসিয়েটেড ফাংশনটিকে কল করে দেই, আর আমরা আমাদের প্রত্যশিত আউটপুট দেখতে পায়।

React এ এক্সট্রা করে কোন ইভেন্ট নেই, DOM এ যেই ইভেন্ট গুলো সাধারণত আমরা দেখে থাকি, সেই ইভেন্ট গুলো নিয়েই আমাদের কাজ করতে হয়। কিন্তু ইভেন্ট হ্যান্ডেল করার প্রসেসটা অল্প একটু ভিন্ন। কারণ এখানে আমরা সাধারণ HTML নিয়ে কাজ না করে JSX নিয়ে কাজ করি।







8. Common Events in React
======================================================

ReactJS এ Native DOM ইভেন্টস গুলো ব্যবহার না করে সাধারণ SyntheticEvents ব্যবহার করা হয়। আসলে দুইটা ইভেন্টের ভিতরে তেমন কোন পার্থক্যই নেই। শুধুমাত্র SyntheticEvents এর ক্ষেত্রে Cross Browser সাপোর্টটা আমরা পেয়ে থাকি। React এর Synthetic Events গুলো হল -

Clipboard Events
onCopy
onCut
onPaste
Composition Events
onCompositionStart
onCompositionUpdate
onCompositionEnd
Keyboard Events
onKeyDown
onKeyUp
onKeyPress
Focus Events
onFocus
onBlur
Form Events
onChange
onInput
onInvalid
onReset
onSubmit
Generic Events
onError
onLoad
Mouse Events
onClick
onContextMenu
onDoubleClick
onDrag
onDragEnd
onDragEnter
onDragExit
onDragLeave
onDragOver
onDragStart
onDrop
onMouseDown
onMosueEnter
onMouseLeave
onMouseMove
onMouseOut
onMouseOver
onMouseUp
Pointer Events
onPointerDown
onPointerMove
onPointerUp
onPointerCancel
onGotPointerCapture
onLostPointerCapture
onPointerEnter
onPointerLeave
onPointerOver
onPointerOut
Selection Events
onSelect
Touch Events
onTouchCancel
onTouchEnd
onTouchMove
onTouchStart
UI Events
onScroll
Wheel Events
onWheel
Media Events
onAbort
onCanPlay
onCanPlayThrough
onDurationChange
onEmptied
onEncrypted
onEnded
onError
onLoadedData
onLoadedMetadata
onLoadStart
onPause
onPlay
onPlaying
onProgress
onRateChange
onSeeked
onSeeking
onStalled
onSuspened
onTimeUpdate
onVolumeChange
onWaiting
Image Events
onLoad
onError
Animation Events
onAnimationStart
onAnimationEnd
onAnimationIteration
Transition Events
onTransitionEnd
Other Events
onToggle
React এর Synthetic Events গুলো সম্পর্কে আরও বিস্তারিত জানতে React এর অফিসিয়াল ডকুমেন্টেশনটি খেয়াল করুন - https://reactjs.org/docs/events.html






9. Practice Problems
====================================================================
প্রাকটিস প্রব্লেমঃ

একটি বাটনের সাথে ক্লিক ইভেন্ট, ডাবল ক্লিক ইভেন্ট, মাউস এন্টার এবং মাউস লিভ ইভেন্ট যুক্ত করুন যার প্রতিটা ইভেন্টে ভিন্ন ভিন্ন কাজ হবে।
Two Way Data বাইন্ডিং ব্যবহার করে একটি ছোট্ট কম্পোনেন্ট তৈরি করুন যেখানে আপনার নেমটা ইনপুট আকারে নেওয়া হবে। যদি ইনপুট ফিল্ডটা ফোকাস অবস্থাতে থাকে তাহলে আপনার নেমটা h3 ট্যাগ এর ভিতরে দেখাবে আর যদি ফোকাস অবস্থায় না থাকে তাহলে h1 ট্যাগ এর ভিতরে দেখাবে।
Select input এলিমেন্ট ব্যবহার করে প্রোগ্রামিং ল্যাংগুয়েজ এর একটা লিস্ট তৈরি করুন। সেখান থেকে যেই প্রোগ্রামিং ল্যনাগুয়েজ গুলো সিলেক্ট করবেন সেগুলো নিচে লিস্ট আকারে দেখাবে।